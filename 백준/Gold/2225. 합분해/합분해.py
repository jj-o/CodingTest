# 0부터 N까지의 정수 K개 더하여 합이 N이 되는 경우의 수
# 덧셈의 순서 바뀔 수 있음
# 한 개의 수 여러 번 사용 가능

# 첫째 줄에 두 정수 N과 K
# 첫째 줄에 담을 1000000000으로 나눈 나머지

# 예시
# 0부터 20까지의 정수 2개 더하여 합이 20이 되는 경우의 수

# 0 20
# 1 19
# 2 18
# 3 17
# 4 16
# 5 15
# 6 14
# 7 13
# 8 12
# 9 11
# 10 10
# 11 9
# 12 8
# 13 7
# 14 6
# 15 5
# 16 4
# 17 3
# 18 2
# 19 1
# 20 0

# 0부터 6까지의 정수 4개를 더하여 그 합이 6이 되는 경우의 수
# 왜 합분해가 다이나믹 프로그래밍이지? 나는 조합을 생각했어

# dp[n-1][k] : 마지막 숫자가 최소 1이상
# dp[n][k-1] : 하나의 숫자를 더 사용할 수 있는 경우 (0도 포함)
# dp[n][k] : 정수 n을 k개의 정수 합으로 나타내는 방법의 수

# N=4, K=3
# dp[4][3] = dp[3][3] + dp[4][2]
# dp[3][3] = dp[2][3] + dp[3][2]
# dp[4][2] = dp[3][2] + dp[4][1]

n,k = map(int,input().split())
dp = [[0]*(k+1) for _ in range(n+1)]

for i in range(k+1):
    dp[0][i] = 1
    
for j in range(n+1):
    dp[j][1] = 1

for i in range(1,n+1):
    for j in range(1,k+1):
        dp[i][j] = dp[i-1][j] + dp[i][j-1]
        
print(dp[n][k]%1000000000)